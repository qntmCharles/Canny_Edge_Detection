Plan:
1: Gaussian Blur [DONE]
2: Sobel [DONE]
3: Non-Maximum Suppression [DONE]
4: Hysteresis Thresholding [DONE]
5: GUI

TODO:
-Store binary images rather than 0s and 255s? Perhaps add an option to save as binary image

-In write up:
	-in HCI: gestalt principles of organisation
	-in analysis research section: point out that thresholding hysteresis will be split into two separate stages
	-point out that progress bar is inferior to a timer - it is not known how much processing is needed so a progress bar is not suitable, timer lets you know it's still going
	-data storage

-Compare to code bookmarked on Chrome:
	-Does NMS give the same result - NO - try old NMS algorithm
	-Connected component detection - recursive - is it faster (CHECK using timeit since python doesn't optimise recursion)
	-Does my program actually remove weak edges that are left over?
	-Compare entire program - where is it different and is it better
	-Does thresholding method work better (probably, try it) kindaaaa?
	-Fix NMS, or whatever else is wrong
		-Why are there still some interpolation errors

-Fix thresholding:
	-Can I threshold the image differently to get better thresholds
	-Does the function work properly?
	-Are there better methods of thresholding

-GUI:
	-fonts
	-add a border around the timer? is that even possible
	-final check to see if threads can be force terminated
	-split into separate modules

-Comment that shit:
	-gaussian [DONE]
	-convolution [DONE]
	-nms
	-main
	-sobel [DONE]
	-hysteresis [DONE]
	-threshold [DONE]
	-gui

Potential:
-Change gaussian kernel radius to be 6*sigma
-Investigate dynamic thresholds
